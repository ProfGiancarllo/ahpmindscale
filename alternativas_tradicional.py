import streamlit as st
import numpy as np
from registro_tempo import iniciar_tempo, finalizar_tempo

def comparar_alternativas_tradicional():
    iniciar_tempo("alternativas")

    if "criterios_concluidos" not in st.session_state or not st.session_state["criterios_concluidos"]:
        st.warning("Por favor, conclua a compara√ß√£o entre crit√©rios antes de avaliar as alternativas.")
        return

    st.subheader("Etapa 2: Compara√ß√£o entre Alternativas para cada Crit√©rio (Tradicional)")
    st.subheader("Compare as alternativas segundo a escala apresentada, n√£o tenha pressa, siga no seu tempo")

    alternativas = [
        "Nova York (EUA)",
        "Orlando (Disney - EUA)",
        "Paris (Fran√ßa)",
        "Londres (Reino Unido)",
        "Roma (It√°lia)",
        "T√≥quio (Jap√£o)"
    ]
    n_alt = len(alternativas)

    criterios = st.session_state["nomes_criterios"]
    pesos_criterios = st.session_state["pesos_criterios"]
    n_crit = len(criterios)

    valores_saaty = [1/9, 1/8, 1/7, 1/6, 1/5, 1/4, 1/3, 1/2, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    rotulos_saaty = ["1/9", "1/8", "1/7", "1/6", "1/5", "1/4", "1/3", "1/2", "1", "2", "3", "4", "5", "6", "7", "8", "9"]

    legenda = {
        "9": "√© absolutamente mais importante que",
        "8": "√© quase absolutamente mais importante que",
        "7": "√© extremamente mais importante que",
        "6": "√© fortemente mais importante que",
        "5": "√© muito mais importante que",
        "4": "√© moderadamente mais importante que",
        "3": "√© um pouco mais importante que",
        "2": "√© levemente mais importante que",
        "1": "tem igual import√¢ncia que",
        "1/2": "√© levemente menos importante que",
        "1/3": "√© um pouco menos importante que",
        "1/4": "√© moderadamente menos importante que",
        "1/5": "√© muito menos importante que",
        "1/6": "√© fortemente menos importante que",
        "1/7": "√© extremamente menos importante que",
        "1/8": "√© quase absolutamente menos importante que",
        "1/9": "√© absolutamente menos importante que"
    }

    textos_apoio = {
        "Custo da Viagem": {
            "Nova York (EUA)": "Custo m√©dio de R$ 18.000, incluindo passagem, hospedagem e alimenta√ß√£o.",
            "Orlando (Disney - EUA)": "Custo m√©dio de R$ 20.000, incluindo ingressos dos parques.",
            "Paris (Fran√ßa)": "Custo m√©dio de R$ 17.000, considerando atra√ß√µes e alimenta√ß√£o.",
            "Londres (Reino Unido)": "Custo m√©dio de R$ 19.000 com libra mais valorizada.",
            "Roma (It√°lia)": "Custo m√©dio de R$ 16.000, com op√ß√µes econ√¥micas dispon√≠veis.",
            "T√≥quio (Jap√£o)": "Custo m√©dio de R$ 21.000, devido √† longa dist√¢ncia e custo de vida."
        },
        "Belezas Naturais": {
            "Nova York (EUA)": "Central Park e Niagara Falls (viagem extra).",
            "Orlando (Disney - EUA)": "Parques tem√°ticos com √°reas verdes e lagos artificiais.",
            "Paris (Fran√ßa)": "Jardins de Luxemburgo e parques urbanos.",
            "Londres (Reino Unido)": "Hyde Park e excurs√µes para Cotswolds.",
            "Roma (It√°lia)": "Jardins de Villa Borghese e proximidade com a Toscana.",
            "T√≥quio (Jap√£o)": "Monte Fuji pr√≥ximo, jardins imperiais e parques floridos."
        },
        "Atrativos Culturais": {
            "Nova York (EUA)": "Museus como MoMA e MET, Broadway e arquitetura ic√¥nica.",
            "Orlando (Disney - EUA)": "Foco em entretenimento, com atra√ß√µes tem√°ticas.",
            "Paris (Fran√ßa)": "Museu do Louvre, Torre Eiffel, e grande acervo hist√≥rico.",
            "Londres (Reino Unido)": "British Museum, Torre de Londres, tradi√ß√£o e modernidade.",
            "Roma (It√°lia)": "Coliseu, Vaticano, e heran√ßa romana e renascentista.",
            "T√≥quio (Jap√£o)": "Templos antigos, museus modernos e tradi√ß√£o milenar."
        },
        "Gastronomia": {
            "Nova York (EUA)": "Culin√°ria internacional e op√ß√µes gourmet de alto n√≠vel.",
            "Orlando (Disney - EUA)": "Comida americana, tem√°tica e redes internacionais.",
            "Paris (Fran√ßa)": "Alta gastronomia francesa, caf√©s e vinhos renomados.",
            "Londres (Reino Unido)": "Culin√°ria internacional, bons restaurantes e pubs.",
            "Roma (It√°lia)": "Massas, pizzas aut√™nticas e culin√°ria italiana cl√°ssica.",
            "T√≥quio (Jap√£o)": "Sushi, ramen, izakayas e cozinha japonesa tradicional."
        },
        "Compras": {
            "Nova York (EUA)": "5¬™ Avenida, outlets e variedade de marcas famosas.",
            "Orlando (Disney - EUA)": "Outlets com grandes descontos e lojas de lembran√ßas.",
            "Paris (Fran√ßa)": "Moda de luxo, boutiques e grandes lojas como Galeries Lafayette.",
            "Londres (Reino Unido)": "Oxford Street, lojas vintage e centros comerciais.",
            "Roma (It√°lia)": "Moda italiana, mercados locais e lojas de grife.",
            "T√≥quio (Jap√£o)": "Tecnologia, moda japonesa e centros comerciais modernos."
        }
    }

    resultados = {}
    criterios_ok = 0

    for idx, criterio in enumerate(criterios):
        st.markdown(f"### Crit√©rio: {criterio}")
        matriz = [[1 if i == j else None for j in range(n_alt)] for i in range(n_alt)]

        for i in range(n_alt):
            for j in range(i + 1, n_alt):
                col1, col2 = st.columns([3, 2])
                with col1:
                    idx_valor = st.slider(
                        f"{alternativas[i]} vs {alternativas[j]} ({criterio})",
                        min_value=0, max_value=16, value=8,
                        format="%s", key=f"alt_{idx}_{i}_{j}")
                    valor = valores_saaty[idx_valor]
                    matriz[i][j] = valor
                    matriz[j][i] = round(1 / valor, 4)
                with col2:
                    frase = legenda[rotulos_saaty[idx_valor]].replace("tem", f"de {alternativas[i]} tem")
                    st.markdown(f"**{rotulos_saaty[idx_valor]}** ‚Äì {alternativas[i]} {frase} em rela√ß√£o a {alternativas[j]}")
                    st.caption(f"üîé {alternativas[j]}: {textos_apoio[criterio][alternativas[j]]}\n\nüîç {alternativas[i]}: {textos_apoio[criterio][alternativas[i]]}")

        def calcular_pesos(matriz):
            matriz = np.array(matriz)
            soma_colunas = matriz.sum(axis=0)
            matriz_normalizada = matriz / soma_colunas
            return matriz_normalizada.mean(axis=1)

        def calcular_consistencia(matriz, pesos):
            n = len(matriz)
            matriz = np.array(matriz)
            w = np.dot(matriz, pesos)
            lambda_max = (w / pesos).mean()
            CI = (lambda_max - n) / (n - 1)
            RI_dict = { 1: 0.00, 2: 0.00, 3: 0.58, 4: 0.90, 5: 1.12, 6: 1.24, 7: 1.32, 8: 1.41, 9: 1.45, 10: 1.49 }
            RI = RI_dict.get(n, 1.49)
            CR = CI / RI if RI != 0 else 0
            return CR

        if all(matriz[i][j] is not None for i in range(n_alt) for j in range(n_alt)):
            pesos = calcular_pesos(matriz)
            CR = calcular_consistencia(matriz, pesos)

            st.write(f"Raz√£o de Consist√™ncia (CR): {CR:.4f}")
            if CR <= 0.1:
                st.success("‚úÖ Matriz consistente")
                resultados[criterio] = pesos
                criterios_ok += 1
            else:
                st.error("‚ùå Matriz inconsistente. Ajuste os valores para melhorar a consist√™ncia.")
                st.session_state["inconsistencias"] += 1
        else:
            st.warning("‚ö†Ô∏è Preencha todos os valores da matriz antes de prosseguir.")

    if criterios_ok == n_crit:
        st.session_state["alternativas_concluidas"] = True
        st.session_state["resultados_alternativas"] = resultados
        finalizar_tempo("alternativas")
        st.subheader("Resultado Final")
        scores_finais = np.zeros(n_alt)

        for idx, criterio in enumerate(criterios):
            scores_finais += np.array(resultados[criterio]) * pesos_criterios[idx]

        for i, score in enumerate(scores_finais):
            st.write(f"{alternativas[i]}: {score:.4f}")

        melhor = alternativas[np.argmax(scores_finais)]
        st.markdown(f"<h1 style='text-align: center; color: green; font-size: 40px;'>üèÜ Melhor destino: {melhor}</h1>", unsafe_allow_html=True)
